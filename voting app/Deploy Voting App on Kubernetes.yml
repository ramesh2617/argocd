# The Nautilus DevOps team is running a voting app on their old infrastructure that they 
# want to migrate to the Kubernetes cluster. They have already prepared the requirements 
# related to the application stack. As per details given below deploy the voting app on the Kubernetes cluster:


# Create a namespace which should be named vote.

# Create a service vote-service under the namespace you created. Port should be 5000, 
# targetPort should be 80 and nodePort should be 31000. Service endpoint exposes deployment vote-deployment under namespace vote.

# Create a deployment vote-deployment under the namespace you created. Replicas count should be 1, 
# the container name should be vote, use kodekloud/examplevotingapp_vote:before image ( use exact name of image as mentioned ) 
# and containerPort should be 80.

# Create a service redis under the same namespace. Port should be 6379, targetPort should be 6379,
# its type should be ClusterIP service endpoint exposes deployment redis-deployment under namespace vote.

# Create a redis deployment redis-deployment under the same namespace. Replica count should be 1. 
# The container name should be redis use redis:alpine image ( use exact name as mentioned ). Volume type should be EmptyDir, volumeName should be redis-data and its mountPath should be /data

# Create a deployment worker under the same namespace. Its replicas count should be 1. 
# The container name should be worker, use kodekloud/examplevotingapp_worker image ( use exact name of image as mentioned ).

# Create a service db under the same namespace. Port shold be 5432, targetPort should be 5432 
# and its type should be ClusterIP.

# Create a deployment db-deployment under the same namespace. Its replica count should be 1. 
# The container name should be postgres, use postgres:9.4 image ( use exact name of image as mentioned ). Define ENV as first env name should be POSTGRES_USER and its value should be postgres, second env name should be POSTGRES_PASSWORD and its value should be postgres and third env name should be POSTGRES_HOST_AUTH_METHOD and its value should be trust. Volume type should be EmptyDir, volumeName should be db-data and its mountPath should be /var/lib/postgresql/data.

# Create a deployment for the result which should be named result-deployment under the same namespace. 
# Configure spec as replica should be 1. The container name should be result, use image kodekloud/examplevotingapp_result:before ( use exact name of image as mentioned ) and the containerPort should be 80.

# Create a service for result which should be named as result-service under the same namespace. 
# Configure spec as port should be 5001, targetPort should be 80 and nodePort should be 31001 and its type should be NodePort.

# You can use any labels as per your choice.

# Note: The kubectl on jump_host has been configured to work with the kubernetes cluster.

# Step 1: Create the new namespace: kubectl create ns vote
# Step 2: kubectl create -f <this file>
# Step 3: Wait for the pods to be in 'Running' state
# Step 4: Verify: Open Voting app on browser by clicking 'Open Port on Host 1'
#         and port as vote-service NodePort below. You should see the voting page.
# Step 5: Verify: In another browser, also open Result app on browser by clicking
#         'Open Port on Host 1' and port as reuslt-service NodePort below. You should
#         see the result page
# Step 6: Verify: In the voting page, vote for any of the entries. You should immediately
#         see the result page updated with the result. This means that the worker-pod is
#         working correctly
---
apiVersion: v1
kind: Service
metadata:
  name: vote-service
  namespace: vote
spec:
  type: NodePort
  selector:
    app: vote-pod
  ports:
    - port: 5000
      targetPort: 80
      nodePort: 31000
---
apiVersion: v1
kind: Service
metadata:
  name: result-service
  namespace: vote
spec:
  type: NodePort
  selector:
    app: result-pod
  ports:
    - port: 5001
      targetPort: 80
      nodePort: 31001
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: vote
spec:
  type: ClusterIP
  selector:
    app: redis-pod
  ports:
    - port: 6379
      targetPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: db
  namespace: vote
spec:
  type: ClusterIP
  selector:
    app: postgres-pod
  ports:
    - port: 5432
      targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  namespace: vote
  labels:
    app: redis-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-pod
  template:
    metadata:
      labels:
        app: redis-pod
    spec:
      volumes:
        - name: redis-data
          emptyDir: {}
      containers:
        - name: redis
          image: redis:alpine
          volumeMounts:
            - mountPath: /data
              name: redis-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-deployment
  namespace: vote
  labels:
    app: db-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-pod
  template:
    metadata:
      labels:
        app: postgres-pod
    spec:
      volumes:
        - name: db-data
          emptyDir: {}
      containers:
        - name: postgres
          image: postgres:9.4
          env:
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              value: postgres
            - name: POSTGRES_HOST_AUTH_METHOD
              value: trust
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: db-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vote-deployment
  namespace: vote
  labels:
    app: vote-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vote-pod
  template:
    metadata:
      labels:
        app: vote-pod
    spec:
      containers:
        - name: voting-app
          image: kodekloud/examplevotingapp_vote:before
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: result-deployment
  namespace: vote
  labels:
    app: result-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: result-pod
  template:
    metadata:
      labels:
        app: result-pod
    spec:
      containers:
        - name: result-app
          image: kodekloud/examplevotingapp_result:before
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker
  namespace: vote
  labels:
    app: worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: worker-pod
  template:
    metadata:
      labels:
        app: worker-pod
    spec:
      containers:
        - name: worker
          image: kodekloud/examplevotingapp_worker
